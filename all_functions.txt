init_point_container: sammelt klicks und malt kreise
get_min_max_angle: berechnet winkel zu neuem punkt.
init_test_tendril: erzeugt ersten ast
get_points: sammelt gesetzte punkte ein und füttert wachsum
create_test_tendril: erzeugt neuen ast aus altem ast und 2 punkten
dot_product:punkt produkt
init_grid
get_element_under_rect
draw_grid
update_hotspots
init_tendril
normalize_vec2: normalisiert vektor
create_tendril_branch
find_hottest_hotspot
find_closest_hotspot
draw_branches
grow_tendril: erzeugt tendril und zeichnet
randomIntFromInterval



      function init_grid(r_count){
        cols = Math.round(Math.sqrt(r_count * (w/h)));
        rows = Math.round(r_count / cols);

        var _r_w = w / cols; // calc width of rects
        var _r_h = h / rows; // calc height of rects

        var idx = 0;
        for(var r = 0; r < rows; r++){
          for(var c = 0; c < cols ; c++){
            grid_data[idx] = new Object();
            grid_data[idx]["id"]      = idx;
            grid_data[idx]["pos_x"]   = _r_w * c;
            grid_data[idx]["pos_y"]   = _r_h * r;
            grid_data[idx]["width"]   = _r_w;
            grid_data[idx]["height"]  = _r_h;
            grid_data[idx]["touched"] = 0;
            idx++;
          }
        }
      }



TO DO:
unsichtbares grid füllen
äste verschönern



wenn Winkel 0 -> zeigt nach rechts.
wenn Winkel > 0 -> zeigt nach unten.
wenn Winkel < 0 -> zeigt nach oben.
wenn Winkel -pi oder pi zeigt nach links.

      function init_tendril(){
        var a = Math.PI/3
        var _alpha = -Math.PI/2;
        var _omega = _alpha + a *Math.random() - a/2
        //_alpha + a *Math.random() - a/2

        //-3*Math.PI/8;a *Math.random()
        
        //max_angle * Math.random() + (max_angle/2) ;
        var _start = { "x":w/2, 
                       "y":h};
        var _middle = { "x": _start.x + 0.5*(branch_length * Math.cos(_omega - _alpha) ),
                        "y": _start.y + 0.5*(branch_length * Math.sin(_omega - _alpha) )}; 
        var _middle = { "x": _start.x + 0.5*(branch_length * Math.cos(_alpha) ),
                        "y": _start.y + 0.5*(branch_length * Math.sin(_alpha) )}; 
        var _end = { "x": _start.x + branch_length * Math.cos(_omega), 
                     "y": _start.y + branch_length * Math.sin(_omega)}; 
        var _end = { "x": _start.x + branch_length * Math.cos(_alpha), 
                     "y": _start.y + branch_length * Math.sin(_alpha)}; 

        var _root = new Array();
        _root.push(_start);
        _root.push(_middle)
        _root.push(_end);

        plant_data[0] = new Object();
        plant_data[0]["id"] = 0;
        plant_data[0]["branch"] = _root;
        plant_data[0]["angle"] = _omega;
        plant_data[0]["generation"] = 0;
        plant_data[0]["children"] = [1];
        plant_data[0]["branchlet"] = ["b1"];
        plant_data[0]["parent"] = -1;
        branch_count++;

        branch_queue.push(0);
        draw_branches([0]);
      }




var body = document.body,
    html = document.documentElement;

var height = Math.max( body.scrollHeight, body.offsetHeight, 
                       html.clientHeight, html.scrollHeight, html.offsetHeight );



###########################
                       <!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>height demo</title>
  <style>
  body {
    background: yellow;
  }
  button {
    font-size: 12px;
    margin: 2px;
  }
  p {
    width: 150px;
    border: 1px red solid;
  }
  div {
    color: red;
    font-weight: bold;
  }
  </style>
  <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
</head>
<body>
 
<button id="getp">Get Paragraph Height</button>
<button id="getd">Get Document Height</button>
<button id="getw">Get Window Height</button>
 
<div>&nbsp;</div>
<p>
  Sample paragraph to test height
</p>
 
<script>
function showHeight( element, height ) {
  $( "div" ).text( "The height for the " + element + " is " + height + "px." );
}
$( "#getp" ).click(function() {
  showHeight( "paragraph", $( "p" ).height() );
});
$( "#getd" ).click(function() {
  showHeight( "document", $( document ).height() );
});
$( "#getw" ).click(function() {
  showHeight( "window", $( window ).height() );
});
</script>
 
</body>
</html>

###################

            function create_next_tendril_based_on_mouse(object, point, point2){

                //new_child_id = object.children[0]
                plant_data[new_child_id] = new Object();
                
                var _old_end = plant_data[object.id].branch[2];
                var _old_mid = plant_data[object.id].branch[1];
                var _old_omega = plant_data[object.id].angle;

                var _start = _old_end;

                var _omega = get_min_max_angle(_start, _old_omega, point);
                var _middle = { "x": _start.x + branch_length * Math.cos(_omega), //+ (Math.random() * 200) - 100,
                                "y": _start.y + branch_length * Math.sin(_omega)}; 

                _omega = get_min_max_angle(_middle, _omega, point2);
                var _end = {"x": _middle.x + branch_length * Math.cos(_omega),
                            "y": _middle.y + branch_length * Math.sin(_omega)};
                
                var _branch = new Array();
                _branch.push(_old_mid);
                _branch.push(_start);
                _branch.push(_middle);
                _branch.push(_end);


                plant_data[new_child_id]["id"] = new_child_id;
                plant_data[new_child_id]["branch"] = _branch;
                plant_data[new_child_id]["angle"] = _omega;
                plant_data[new_child_id]["direction"] = 
                plant_data[new_child_id]["generation"] = object.generation +1;
                plant_data[new_child_id]["children"] = [];
                plant_data[new_child_id]["parent"] = object.id;
                branch_count++;

                branch_queue.push(new_child_id);
            }